*{
    margin: 0;
    padding: 0;
}

#float{
    height: 100px;
    width: 740px;
    background-color: khaki;
    border: 3px solid black;
    margin: 10px;
}

.fp{
    height: 50%;
    width: 25%;
    margin: 10px;
    border: 2px dotted black;
}

#float_right{
    background-color: red; 
    float: right;  /* It takes the element to the rightmost corner of the container */
}

#float_left{
    background-color:orange ;
    float: left;  /* It takes the element to the leftmost corner of the container */
    /* float : none doesnot displace the place of element */
}

#heading{
    text-align: center;
}

.container{
    height: 600px;
    width: 600px;
    padding: 10px;
    margin: 20px;
    border: 3px solid black;
    background-color: lavender;
    display: inline-block;
}

.flexbox{
    height: 25%;
    width: 25%;/* The height and width of flex item do not exceeds its container they authomatically shrink  */
    margin: 5px;
    border: 2px solid black;
}

#flex_item1{
    background-color: darkorange;
}

#flex_item2{
    background-color: blueviolet;
}

#flex_item3{
    background-color: yellow;
}

#flex_item4{
    background-color: tomato ;
}

#flex_item5{
    background-color:rgb(237, 255, 77);
}

#row{
    display: flex;
    flex-direction: row;  /* It display items horizontally from left to right */
    flex-wrap: wrap;  /* It display as many as it can remaining will be shifted to next line */
    /* flex-wrap is used when an size of element box is big then it will show it in next line  */
}

#row-reverse{
    display: flex;
    flex-direction: row-reverse;  /* It display items horizontally from right to left */
    position: absolute;
    right: 10px;
    top: 164px;
    flex-wrap: wrap-reverse;  /* It shows most recent item on the top */
}

#column{
    display: flex;
    flex-direction: column;  /* It display items vertically from top to bottom */
    flex-wrap: nowrap;  /* It put no difference the element will shrink */
}

#column-reverse{
    display: flex;
    flex-direction: column-reverse;    /* It display items vertically from bottom to top */
    position: absolute;
    right: 10px;
    top: 809px;
}

.flexcontainer{
    height: 200px;
    width: 900px;
    padding: 10px;
    margin: 20px;
    border: 3px solid black;
    background-color: bisque;
}

.justify_content{
    height: 80px;
    width: 10%;
    margin: 5px;
    border: 3px solid black;
}

#flexitem_1{
    background-color: coral;
    align-self: center;
}

#flexitem_2{
    background-color: brown;
}

#flexitem_3{
    background-color: fuchsia;
}

#flexitem_4{
    background-color: olive;
}

#flexitem_5{
    background-color: gray;
}

#start{
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: start;  /* It shows Default Alignment */
    align-content: end;  /* Align flex container to the end of container */
    /* align-items is used to align the flex container along cross axis */
}

#end{
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: end;  /* Items Align to the end of container */
    align-content: center;  /* Align flex container to the center of container */
}

#center{
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: center;  /* Items Align to the center of container */
    align-content: start;  /* Align flex container to the start of container */
}

#space-between{
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: space-between;  /* 2 items at corner and 1 at middle and remaining has equal space between them */
    align-content: end;
}

#space-around{
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: space-around;  /* Space around every item is same */
    align-content: center;
}

#space-evenly{
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: space-evenly;  /* All items has same space */
    align-content: start;
}

.box{
    height: 100px;
    width: 100px;
    border: 3px solid black;
    margin: 5px;
}

.Align-content{
    height: 600px;
    width: 600px;
    padding: 10px;
    margin: 20px;
    border: 3px solid black;
    background-color: lavender;

    display: flex;
    flex-direction: row;
    flex-wrap: wrap; 
}

#aligncontent1{
    justify-content: center;
    align-items: center;
    align-content: center;  /* It remove extra space from cross axis (More Priority is given to align_content) */
}

#aligncontent2{
    justify-content: center;
    align-items: start;
    align-content: start;  /* Or baseline */  
}

#aligncontent3{
    justify-content: center;
    align-items: end;
    align-content: end; 
}

#box1{
    background-color: tomato;
}

#box2{
    background-color: blueviolet;
}

#box3{
    background-color: yellow;
}

.align-self{
    height: 200px;
    width: 900px;
    padding: 10px;
    margin: 20px;
    border: 3px solid black;
    background-color: burlywood;
    display: flex;
}

.flexitem{
    margin: 5px;
    border: 3px solid black;
}

#alignself1{
    justify-content: center;
    align-items: center;
}

#alignself2{
    justify-content: center;
    align-items: start;
}

#alignself3{
    justify-content: center;
    align-items: end;
}

#self1{
    height: 90px;
    width: 150px;
    background-color: darkorange;
    align-self: center;  /* It align this 1 box to center of container */
    order: 2; /* Overwrite the original order */
}

#self2{
    height: 90px;
    width: 160px;
    flex-grow: 1;  /* It will grow the box Default = 0 only when it not cover height/width */
    background-color: chartreuse;
    align-self: end;  /* It align this 1 box to end of container */
    order: 1;
}

#self3{
    height: 90px;
    width: 150px;
    background-color: darkgrey;
    align-self: start;  /* It align this 1 box to start of container */
    order: 4;
}

#self4{
    height: 90px;
    width: 150px;
    background-color: saddlebrown;
    order: 3;
}

#flexshrink{
    justify-content: center;
    align-items: center;
}

#shrink1{
    height: 60%;
    width: 30%;
    background-color: rebeccapurple;
}

#shrink2{
    height: 60%;
    width: 30%;
    background-color: red;
}

#shrink3{
    height: 60%;
    width: 30%;
    background-color: yellow;
    flex-shrink: 2;  /* It will double shrink the box To apply it the boxes should cover either height/width */
}

#shrink4{
    height: 60%;
    width: 30%;
    background-color: green;
}

#grid{
    display: grid;  /* It display multi dimensional layout */
    grid-template-columns: 200px 200px;  /* It specify number of column with their size */
    grid-template-rows: 200px 200px;  /* It specify number of ror with their size */
    margin: 30px;
    padding: 20px;
    border: 3px solid black;
}

#griditem_1{
    grid-column: 1/2;  /* It is placed at column 1 */
    grid-row: 1/2;  /* It is placed at row 1 */
    background-color: lightblue;
    margin: 10px;
    padding: 20px;
    border: 3px solid black;
}

#griditem_2{
    grid-column: 2/2;  /* It is placed at column 2 */
    grid-row: 1/2;  /* It is placed at row 1 */
    background-color: lightgreen;
    margin: 10px;
    padding: 20px;
    border: 3px solid black;
}

#griditem_3{
    grid-column: 1/2;  /* It is placed at column 1 */
    grid-row: 2/2;  /* It is placed at row 2 */
    background-color: lightpink;
    margin: 10px;
    padding: 20px;
    border: 3px solid black;
}

#griditem_4{
    grid-column: 2/2;  /* It is placed at column 2 */
    grid-row: 2/2;  /* It is placed at row 2 */
    background-color: lightyellow;
    margin: 10px;
    padding: 20px;
    border: 3px solid black;
}

#width{
    margin: 20px;
    height: 200px;
    width: 250px;
    background-color: darkorange;
}

@media screen and (width:1000px) {  /* If width of screen is 1000px then following condition will merge */
    #width{
        background-color: darkviolet;
    }
}

#min-width{
    margin: 20px;
    height: 200px;
    width: 250px;
    background-color: lemonchiffon;
}

@media screen and (min-width : 1000px) {  /* If width of screen is 1000px or more than it then following condition will merge */
    #min-width{
        background-color: gold;
    }
}

#max-width{
    margin: 20px;
    height: 200px;
    width: 250px;
    background-color: lightpink;
}

@media screen and (max-width : 1000px) {  /* If width of screen is 1000px or less than it then following condition will merge */
    #max-width{
        background-color: tomato;
    }
}

#combinators{
    margin: 20px;
    height: 200px;
    width: 250px;
    background-color: slategrey;
}

@media screen and (min-width : 1000px) and (max-width : 1200px) {
    /* If width of screen is more than 1000px and less than 1200px it then following condition will merge */
    #combinators{
        border-radius: 50%;
    }
}